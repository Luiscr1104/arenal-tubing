<div id="starfield" class="absolute inset-0">
  <canvas id="starfield-canvas"></canvas>
</div>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 800;
  const SPEED = 0.2;

  class RiverParticle {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;
    size: number;
    opacity: number;
    speed: number;
    color: string;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
      this.size = Math.random() * 2 + 0.5;
      this.opacity = Math.random() * 0.7 + 0.3;
      this.speed = (Math.random() * 0.5 + 0.5) * SPEED;

      // Tonos azules para las partículas del río
      const blueShade = Math.floor(Math.random() * 55) + 200;
      this.color = `rgba(255, 255, ${blueShade}, ${this.opacity})`;
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;

      // Movimiento principalmente horizontal (de izquierda a derecha)
      this.x += speed * 2;

      // Pequeño movimiento ondulante vertical para simular corrientes
      this.y += Math.sin(this.x * 0.02) * 0.3;

      // Si sale por la derecha, reaparece por la izquierda
      if (this.x > width) {
        this.x = 0;
        this.y = Math.random() * height;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.strokeStyle = this.color;
      ctx.lineWidth = this.size * (1 + this.z * 0.1);
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  const particles = Array.from(
    { length: COUNT },
    () => new RiverParticle(0, 0, 0),
  );
  let rafId = 0;

  const canvas = document.querySelector(
    "#starfield-canvas",
  ) as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#starfield") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    // Distribuir partículas
    for (const particle of particles) {
      particle.x = Math.random() * width;
      particle.y = Math.random() * height;
      particle.z = 0;
      particle.xPrev = particle.x;
      particle.yPrev = particle.y;
    }

    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    // Fondo azul semitransparente para simular agua
    ctx.fillStyle = "rgba(30, 80, 150, 0.3)";
    ctx.fillRect(0, 0, width, height);

    // Actualizar y dibujar partículas
    for (const particle of particles) {
      particle.update(width, height, SPEED);
      particle.draw(ctx);
    }

    // Efecto adicional: líneas ondulantes horizontales sutiles para simular corrientes
    for (let y = 0; y < height; y += 30) {
      ctx.beginPath();
      ctx.moveTo(0, y);

      for (let x = 0; x < width; x += 20) {
        const yOffset = Math.sin(x * 0.03 + performance.now() * 0.001) * 3;
        ctx.lineTo(x, y + yOffset);
      }

      ctx.strokeStyle = "rgba(255, 255, 255, 0.05)";
      ctx.stroke();
    }

    rafId = requestAnimationFrame(frame);
  }
</script>
