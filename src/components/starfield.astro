<div id="starfield" class="absolute inset-0">
  <canvas id="starfield-canvas"></canvas>
</div>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 400; // Reducido para que las burbujas sean menos densas
  const SPEED = 0.05; // Reducido para simular movimiento más lento en agua

  class Bubble {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;
    radius: number;
    opacity: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
      this.radius = Math.random() * 4 + 1; // Tamaño variable para las burbujas
      this.opacity = Math.random() * 0.5 + 0.1; // Opacidad variable para efecto de profundidad
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;

      // Movimiento zigzagueante sutil para simular burbujas en agua
      this.x += Math.sin(this.y / 50) * 0.5;
      this.y -= this.z * speed * 2; // Burbujas suben en el agua

      // Reiniciar burbujas cuando lleguen a la parte superior
      if (this.y < -height / 2) {
        this.x = Math.random() * width - width / 2;
        this.y = height / 2 + Math.random() * 100; // Aparecen desde abajo
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
        this.radius = Math.random() * 4 + 1;
        this.opacity = Math.random() * 0.5 + 0.1;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      // Dibujar burbujas como círculos con contorno y relleno semitransparente
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius * (1 + this.z * 0.1), 0, Math.PI * 2);
      ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity * 0.5})`;
      ctx.strokeStyle = `rgba(255, 255, 255, ${this.opacity})`;
      ctx.lineWidth = 0.5;
      ctx.fill();
      ctx.stroke();

      // Pequeño destello para simular reflejo de luz en la burbuja
      ctx.beginPath();
      ctx.arc(
        this.x - this.radius * 0.3,
        this.y - this.radius * 0.3,
        this.radius * 0.2,
        0,
        Math.PI * 2,
      );
      ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity * 2})`;
      ctx.fill();
    }
  }

  const bubbles = Array.from({ length: COUNT }, () => new Bubble(0, 0, 0));
  let rafId = 0;

  const canvas = document.querySelector(
    "#starfield-canvas",
  ) as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#starfield") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    for (const bubble of bubbles) {
      bubble.x = Math.random() * width - width / 2;
      bubble.y = Math.random() * height;
      bubble.z = 0;
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(0, 60, 120, 0.4)"; // Azul marino semitransparente para efecto acuático
    rafId = requestAnimationFrame(frame);
  }
  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    // Limpiar pantalla con color azul marino
    ctx.fillStyle = "rgba(0, 60, 120, 0.4)";
    ctx.fillRect(-width / 2, -height / 2, width, height);

    for (const bubble of bubbles) {
      bubble.update(width, height, SPEED);
      bubble.draw(ctx);
    }

    rafId = requestAnimationFrame(frame);
  }
</script>
